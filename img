/Users/tberthie/Projets/Wolf3D/srcs/draw.c:	target = wolf->img->pixels + (y * wolf->img->pitch + x * 4);
/Users/tberthie/Projets/Wolf3D/srcs/draw.c:	*target = wolf->color;
/Users/tberthie/Projets/Wolf3D/srcs/draw.c:	wolf->color = color;
/Users/tberthie/Projets/Wolf3D/srcs/minimap.c:	px = wolf->posx + ((double)x - MINI / 2) / 10;
/Users/tberthie/Projets/Wolf3D/srcs/minimap.c:	py = wolf->posy + ((double)y - MINI / 2) / 10;
/Users/tberthie/Projets/Wolf3D/srcs/minimap.c:	if (px > 0 && py > 0 && px < wolf->line && py < wolf->size / wolf->line &&
/Users/tberthie/Projets/Wolf3D/srcs/minimap.c:	wolf->map[(int)(floor(px) + floor(py) * wolf->line)] != FLOOR)
/Users/tberthie/Projets/Wolf3D/srcs/render.c:	while (y < WINY / 2 - wolf->pitch)
/Users/tberthie/Projets/Wolf3D/srcs/render.c:		draw_line(wolf, 0, y + WINY / 2 + wolf->pitch, WINX);
/Users/tberthie/Projets/Wolf3D/srcs/render.c:	while (y >= -wolf->pitch)
/Users/tberthie/Projets/Wolf3D/srcs/render.c:		draw_line(wolf, 0, y + wolf->pitch, WINX);
/Users/tberthie/Projets/Wolf3D/srcs/render.c:	wolf->img = SDL_CreateRGBSurface(0, WINX, WINY, 32, 0xff000000, 0x00ff0000,
/Users/tberthie/Projets/Wolf3D/srcs/render.c:		alpha = rad(wolf->angle + FOV / 2 - FOV * x / WINX);
/Users/tberthie/Projets/Wolf3D/srcs/render.c:		wolf->vx = cos(alpha);
/Users/tberthie/Projets/Wolf3D/srcs/render.c:		wolf->vy = -sin(alpha);
/Users/tberthie/Projets/Wolf3D/srcs/render.c:	txt = SDL_CreateTextureFromSurface(wolf->ren, wolf->img);
/Users/tberthie/Projets/Wolf3D/srcs/render.c:	SDL_RenderCopy(wolf->ren, txt, 0, 0);
/Users/tberthie/Projets/Wolf3D/srcs/render.c:	SDL_RenderPresent(wolf->ren);
/Users/tberthie/Projets/Wolf3D/srcs/render.c:	SDL_FreeSurface(wolf->img);
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		mx = (dir == 0 ? 1 : -1) * cos(rad(wolf->angle)) / 20;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		my = (dir == 0 ? -1 : 1) * sin(rad(wolf->angle)) / 20;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		mx = cos(rad(wolf->angle + (dir == 1 ? 90 : -90))) / 20;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		my = -sin(rad(wolf->angle + (dir == 1 ? 90 : -90))) / 20;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	if (wolf->posx + mx < 0 || wolf->posx + mx > wolf->line ||
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	wolf->map[(int)(floor(wolf->posx + mx) + floor(wolf->posy)
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	* wolf->line)] == FLOOR)
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		wolf->posx += mx;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	if (wolf->posy + my < 0 || wolf->posy + my > wolf->size / wolf->line ||
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	wolf->map[(int)(floor(wolf->posx) + floor(wolf->posy + my)
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	* wolf->line)] == FLOOR)
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		wolf->posy += my;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		wolf->angle -= (double)(event.motion.xrel) / 15;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		wolf->pitch -= (double)(event.motion.yrel);
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		wolf->status = 0;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	wolf->pitch > WINX ? wolf->pitch = WINX : 0;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	wolf->pitch < -WINX ? wolf->pitch = -WINX : 0;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	status[SDL_SCANCODE_ESCAPE] ? wolf->status = 0 : 0;
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	else if ((wolf->win = SDL_CreateWindow("Wolf3d", SDL_WINDOWPOS_CENTERED,
/Users/tberthie/Projets/Wolf3D/srcs/run.c:	(wolf->ren = SDL_CreateRenderer(wolf->win, -1, SDL_RENDERER_ACCELERATED |
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		while ((wolf->status))
/Users/tberthie/Projets/Wolf3D/srcs/run.c:		SDL_DestroyWindow(wolf->win);
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	newmap = ft_malloc(sizeof(char) * (wolf->size + ft_tablen(line) + 1));
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->map ? ft_strcpy(newmap, wolf->map) : 0;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:		(*(line[i]) == PLAYER && wolf->posx != -1))
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:			wolf->posx = i + 0.5;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:			wolf->posy = wolf->size / wolf->line + 0.5;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:		newmap[wolf->size++] = *(line[i]) == PLAYER ? '.' : *(line[i]);
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	newmap[wolf->size] = 0;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	free(wolf->map);
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->map = newmap;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->status = 1;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->angle = 0;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->pitch = 0;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->map = 0;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->size = 0;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->line = 0;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->posx = -1;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	wolf->dste = WINX / 2 / tan(rad(FOV / 2));
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:		!wolf->line ? wolf->line = ft_tablen(split) : 0;
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:		if (!ft_tablen(split) || (wolf->line && wolf->line != ft_tablen(split)))
/Users/tberthie/Projets/Wolf3D/srcs/setup.c:	if (wolf->posx == -1 || !wolf->size || !wolf->line)
/Users/tberthie/Projets/Wolf3D/srcs/textures.c:	ft_parrpush((void***)&wolf->txs, tx);
/Users/tberthie/Projets/Wolf3D/srcs/textures.c:	wolf->txs = ft_malloc(sizeof(t_tx*));
/Users/tberthie/Projets/Wolf3D/srcs/textures.c:	*wolf->txs = 0;
/Users/tberthie/Projets/Wolf3D/srcs/textures.c:	id = wolf->map[*wolf->pos];
/Users/tberthie/Projets/Wolf3D/srcs/textures.c:	while (wolf->txs[pos])
/Users/tberthie/Projets/Wolf3D/srcs/textures.c:		if (wolf->txs[pos]->id == id)
/Users/tberthie/Projets/Wolf3D/srcs/textures.c:			wolf->tx = wolf->txs[pos]->tx;
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	y = floor(wolf->posy) + (vy > 0);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	x = wolf->posx + fabs(y - wolf->posy) * vx / fabs(vy);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	if (x <= 0 || y <= 0 || x >= wolf->line || y >= wolf->size / wolf->line)
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	while (wolf->map[(pos = (int)(floor(x) + (y - (vy < 0))
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	* wolf->line))] == FLOOR)
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:		if (x <= 0 || y <= 0 || x >= wolf->line || y >= wolf->size / wolf->line)
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	wolf->pos[0] = pos;
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	wolf->ratio[0] = (vy > 0) ? 1 - fabs(x - floor(x)) : x - floor(x);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	return (sqrt(pow(wolf->posx - x, 2) + pow(wolf->posy - y, 2)));
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	x = floor(wolf->posx) + (vx > 0);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	y = wolf->posy + fabs(x - wolf->posx) * vy / fabs(vx);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	if (x <= 0 || y <= 0 || x >= wolf->line || y >= wolf->size / wolf->line)
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	while (wolf->map[(pos = (int)(x - (vx < 0) + floor(y)
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	* wolf->line))] == FLOOR)
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:		if (x <= 0 || y <= 0 || x >= wolf->line || y >= wolf->size / wolf->line)
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	wolf->pos[1] = pos;
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	wolf->ratio[1] = (vx < 0) ? 1 - fabs(y - floor(y)) : y - floor(y);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	return (sqrt(pow(wolf->posx - x, 2) + pow(wolf->posy - y, 2)));
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	y = WINY / 2 - height / 2 + wolf->pitch;
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:		offset = floor(*wolf->ratio * wolf->tx->pitch) +
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:		floor((double)i / (double)height * BMP) * wolf->tx->pitch;
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:		offset -= offset % wolf->tx->format->BytesPerPixel;
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:		color = *(unsigned int*)(wolf->tx->pixels + offset);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	y = WINY / 2 - height / 2 + wolf->pitch;
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	dx = dist_hor(wolf, wolf->vx, wolf->vy);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:	dy = dist_ver(wolf, wolf->vx, wolf->vy);
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:		wolf->pos[0] = wolf->pos[1];
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:		wolf->ratio[0] = wolf->ratio[1];
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:			textured_wall(x, dx > 4 ? 4 / dx : 1, wolf->dste / (dx *
/Users/tberthie/Projets/Wolf3D/srcs/walls.c:			untextured_wall(x, dx > 4 ? 4 / dx : 1, wolf->dste / (dx *
